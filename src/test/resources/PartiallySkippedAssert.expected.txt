package org.assertj.assertions.generator.data.skipped;

import org.assertj.core.api.AbstractAssert;

/**
 * {@link PartiallySkipped} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PartiallySkippedAssert extends AbstractAssert<PartiallySkippedAssert, PartiallySkipped> {

  /**
   * Creates a new <code>{@link PartiallySkippedAssert}</code> to make assertions on actual PartiallySkipped.
   * @param actual the PartiallySkipped we want to make assertions on.
   */
  public PartiallySkippedAssert(PartiallySkipped actual) {
    super(actual, PartiallySkippedAssert.class);
  }

  /**
   * An entry point for PartiallySkippedAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myPartiallySkipped)</code> and get specific assertion with code completion.
   * @param actual the PartiallySkipped we want to make assertions on.
   * @return a new <code>{@link PartiallySkippedAssert}</code>
   */
  public static PartiallySkippedAssert assertThat(PartiallySkipped actual) {
    return new PartiallySkippedAssert(actual);
  }

  /**
   * Verifies that the actual PartiallySkipped is another boolean.
   * @return this assertion object.
   * @throws AssertionError - if the actual PartiallySkipped is not another boolean.
   */
  public PartiallySkippedAssert isAnotherBoolean() {
    // check that actual PartiallySkipped we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isAnotherBoolean()) {
      failWithMessage("\nExpecting that actual PartiallySkipped is another boolean but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PartiallySkipped is not another boolean.
   * @return this assertion object.
   * @throws AssertionError - if the actual PartiallySkipped is another boolean.
   */
  public PartiallySkippedAssert isNotAnotherBoolean() {
    // check that actual PartiallySkipped we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isAnotherBoolean()) {
      failWithMessage("\nExpecting that actual PartiallySkipped is not another boolean but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PartiallySkipped is anotherField.
   * @return this assertion object.
   * @throws AssertionError - if the actual PartiallySkipped is not anotherField.
   */
  public PartiallySkippedAssert isAnotherField() {
    // check that actual PartiallySkipped we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.anotherField) {
      failWithMessage("\nExpecting that actual PartiallySkipped is anotherField but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PartiallySkipped is not anotherField.
   * @return this assertion object.
   * @throws AssertionError - if the actual PartiallySkipped is anotherField.
   */
  public PartiallySkippedAssert isNotAnotherField() {
    // check that actual PartiallySkipped we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.anotherField) {
      failWithMessage("\nExpecting that actual PartiallySkipped is not anotherField but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
